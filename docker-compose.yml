version: '3.8'

services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: flowmetr_development
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  migrate:
    build: .
    entrypoint: ["/usr/bin/entrypoint.sh"]
    command: /bin/sh -lc "bundle exec rails db:prepare && if [ \"$SEED_DB\" = \"true\" ]; then bundle exec rails db:seed; fi"
    environment:
      RAILS_ENV: development
      DATABASE_URL: postgresql://postgres:password@db:5432/flowmetr_development
      REDIS_URL: redis://redis:6379/1
      # SEED_DB: "true"   # set if seed wanted
    depends_on:
      db:
        condition: service_healthy

  web:
    image: flowmetr/flowmetr:latest
    entrypoint: ["/usr/bin/entrypoint.sh"]
    command: bash -lc "bundle exec rails s -p 3000 -b 0.0.0.0"
    volumes:
      - .:/app
    ports: ["3000:3000"]
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/flowmetr_development
      - RAILS_ENV=development
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true

  sidekiq:
    build: .
    entrypoint: ["/usr/bin/entrypoint.sh"]
    command: bundle exec sidekiq
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/flowmetr_development
      - RAILS_ENV=development
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
